# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/dotNET-Core.gitlab-ci.yml
# Note: When updating this template, please consider updating the official CI .NET template at:
# https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/dotNET-Core.gitlab-ci.yml
# This is a simple example illustrating how to build and test .NET Core project
# with GitLab Continuous Integration / Continuous Delivery.
#
# ### Specify the Docker image
#
# Instead of installing .NET Core SDK manually, a docker image is used
# with already pre-installed .NET Core SDK.
#
# The 'latest' tag targets the latest available version of .NET Core SDK image.
# If preferred, you can explicitly specify version of .NET Core (e.g. using '2.2-sdk' tag).
#
# See other available tags for .NET Core: https://hub.docker.com/_/microsoft-dotnet
# Learn more about Docker tags: https://docs.docker.com/glossary/?term=tag
# and the Docker itself: https://opensource.com/resources/what-docker
image: mcr.microsoft.com/dotnet/sdk:8.0

# ### Define variables
#
variables:
  # 1) Name of directory where restore and build objects are stored.
  OBJECTS_DIRECTORY: 'obj'
  # 2) Name of directory used for keeping restored dependencies.
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  # 3) A relative path to the source code from project repository root.
  # NOTE: Please edit this path so it matches the structure of your project!
  SOURCE_CODE_PATH: './'
  PROJECT_PATH: "myConsoleApp"
  PROJECT_TEST_PATH: "myConsoleApp.Tests"

stages:
  - build
  - test
  - test-artifact
  - publish
  - docker
  - deploy
  
# ### Define global cache rule
#
# Before building the project, all dependencies (e.g. third-party NuGet packages)
# must be restored. Jobs on GitLab.com's Shared Runners are executed on autoscaled machines.
#
# Each machine is used only once (for security reasons) and after that is removed.
# This means that, before every job, a dependency restore must be performed
# because restored dependencies are removed along with machines. Fortunately,
# GitLab provides cache mechanism with the aim of keeping restored dependencies
# for other jobs.
#
# This example shows how to configure cache to pass over restored
# dependencies for re-use.
#
# With global cache rule, cached dependencies will be downloaded before every job
# and then unpacked to the paths as specified below.
cache:
  # Per-stage and per-branch caching.
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
  paths:
    - '$PROJECT_PATH/obj/project.assets.json'
    - '$PROJECT_PATH/obj/*.csproj.nuget.*'
    - '$PROJECT_TEST_PATH/obj/project.assets.json'
    - '$PROJECT_TEST_PATH/obj/*.csproj.nuget.*'
    - '$NUGET_PACKAGES_DIRECTORY'
  # paths:
    # Specify three paths that should be cached:
    #
    # 1) Main JSON file holding information about package dependency tree, packages versions,
    # frameworks etc. It also holds information where to the dependencies were restored.
    # - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/project.assets.json'
    # 2) Other NuGet and MSBuild related files. Also needed.
    # - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    # 3) Path to the directory where restored dependencies are kept.
    # - '$NUGET_PACKAGES_DIRECTORY'
  #
  # 'pull-push' policy means that latest cache will be downloaded (if it exists)
  # before executing the job, and a newer version will be uploaded afterwards.
  # Such a setting saves time when there are no changes in referenced third-party
  # packages.
  #
  # For example, if you run a pipeline with changes in your code,
  # but with no changes within third-party packages which your project is using,
  # then project restore will happen quickly as all required dependencies
  # will already be there — unzipped from cache.

  # 'pull-push' policy is the default cache policy, you do not have to specify it explicitly.
  policy: pull-push

# ### Restore project dependencies
#
# NuGet packages by default are restored to '.nuget/packages' directory
# in the user's home directory. That directory is out of scope of GitLab caching.
#
# To get around this, a custom path can be specified using the '--packages <PATH>' option
# for 'dotnet restore' command. In this example, a temporary directory is created
# in the root of project repository, so its content can be cached.
#
# Learn more about GitLab cache: https://docs.gitlab.com/ee/ci/caching/index.html
before_script:
  # - 'dotnet restore --packages $NUGET_PACKAGES_DIRECTORY'
  - 'dotnet restore $PROJECT_PATH/$PROJECT_PATH.csproj --packages $NUGET_PACKAGES_DIRECTORY' # s'applique avant toutes les étapes de manières globales 

build:
  stage: build
  tags:
    - build
    - C#
    - sdk:7.0
  # ### Build all projects discovered from solution file.
  #
  # Note: this will fail if you have any projects in your solution that are not
  # .NET Core-based projects (e.g. WCF service), which is based on .NET Framework,
  # not .NET Core. In this scenario, you will need to use a separate solution
  # file that only has .NET Core-based projects (`dotnet build MyApp.core.sln`),
  # or build every .NET Core-based project by explicitly specifying a relative
  # path to the directory where it is located (e.g. 'dotnet build ./src/ConsoleApp').
  # Only one project path can be passed as a parameter to 'dotnet build' command.
  script:
    - 'dotnet restore $PROJECT_PATH/$PROJECT_PATH.csproj --packages $NUGET_PACKAGES_DIRECTORY'

tests:
  stage: test
  tags:
  - build
  - C#
  - sdk:7.0

  # ### Run the tests
  #
  # You can either run tests for all test projects that are defined in your solution
  # with 'dotnet test' or run tests only for specific project by specifying
  # a relative path to the directory where it is located (e.g. 'dotnet test ./test/UnitTests').
  #
  # You may want to define separate testing jobs for different types of testing
  # (e.g. integration tests, unit tests etc).
  script:
    - 'dotnet test $PROJECT_TEST_PATH --no-restore'

test-artifact:
  stage: test-artifact
  tags:
  - publish
  - C#
  script:
    - echo "test artifact" > test.txt
  artifacts:
    paths:
      - test.txt

publish:
  stage: publish
  tags:
    - publish
    - C#
    - sdk:7.0
  script:
    - dotnet publish $PROJECT_PATH/$PROJECT_PATH.csproj --configuration Release --output publish/
    - ls -la publish/
  artifacts:
    name: "published-output"
    paths:
      - publish/
    expire_in: 1 hour

docker-build:
  stage: docker                             # Étape de la pipeline nommée "docker"
  image: docker:24.0.5   
  tags:                   # Utilise l’image Docker CLI version 24.0.5
    - docker
  services:
    - name: docker:24.0.5-dind              # Lance le service Docker-in-Docker (dind) pour construire des images
      alias: docker                         # Rend ce service accessible via l'alias "docker"
  variables:
    DOCKER_HOST: tcp://docker:2375          # Configure Docker CLI pour utiliser le démon Docker du service dind
    DOCKER_TLS_CERTDIR: ""                  # Désactive TLS (certificats) pour simplifier la communication avec le démon
    DOCKER_DRIVER: overlay2                 # Utilise le système de fichiers Docker recommandé (overlay2)
  before_script: []                         # Vide before_script hérité globalement (évite d'exécuter dotnet restore ici)
  script:
    - docker info                           # Vérifie que Docker fonctionne (utile pour diagnostiquer les erreurs)
    - docker build -t mon-projet:latest -f docker/Dockerfile .   # Construit l'image Docker à partir du Dockerfile
    - docker images                         # Affiche les images Docker présentes pour vérification

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
